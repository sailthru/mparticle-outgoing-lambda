version: 2.1

orbs:
  jvm: sailthru/jvm@0.4.1
  deploy: sailthru/deploy@0.8.0
  aws-cli: circleci/aws-cli@4.1.2
  aws-s3: circleci/aws-s3@4.0.0

parameters:
  artifact_name:
    description: Project name, used to find the final executable and the S3 folder
    type: string
    default: mparticle-outgoing-lambda

  lambda_name:
    description: Name of the Lambda.
    type: string
    default: mparticle_outgoing_sqs_message_processor

  java_version:
    description: String version of Java this project depends on.
    type: string
    default: "21.0"

  deploy_stage:
    description: Flag indicating a stage deployment
    type: boolean
    default: false

  prod_tag:
    description: Test prod deployment using given tag
    type: string
    default: ""

executors:
  test_containers:
    parameters:
      java_version:
        type: string
    docker:
      - image: cimg/openjdk:<< parameters.java_version >>
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_PASSWORD


references:
  filter_branch_only: &filter_branch_only
    branches:
      only: /.*/
    tags:
      ignore: /.*/

  filter_main_only: &filter_main_only
    branches:
      only:
        - main
    tags:
      ignore: /.*/

  filter_tag_only: &filter_tag_only
    branches:
      ignore: /.*/
    tags:
      only: /^v\d+$/

jobs:
  create_lambda_release:
    description: >
      "Tag" a Lambda. This job will copy the artifact to the S3 bucket to the current version tag (if applicable)
      as well as the "latest" version.

    executor: deploy/default

    parameters:
      artifact_name:
        description: Name of the project, will be used for the S3 path.
        type: string

      source_version:
        description: Source version. Defaults to the git revision.
        type: string
        # Note this is required to parameterize git revision (SHA1) as it is not accessible directly in an orb
        default: << pipeline.git.revision >>

      version:
        description: >
          Destination version. Defaults to the git tag. If equal to the source_version,
          only copy to latest will be made.
        type: string
        default: << pipeline.git.tag >>

      aws_role_arn:
        type: string
        description: AWS Role ARN to give CircleCI access to CodeArtifact
        default: "arn:aws:iam::680305091011:role/circleci"

      s3_bucket:
        description: S3 bucket name
        type: string
        default: sailthru-lambda-packages

      aws_region:
        type: string
        description: AWS region for the S3 bucket
        default: us-east-1

    steps:
      - aws-cli/setup:
          role_arn: << parameters.aws_role_arn >>
          region: << parameters.aws_region >>
      - run: |
          echo copying << parameters.source_version >> to <<parameters.version >>
      - unless:
          condition:
            equal: [ << parameters.source_version >>, << parameters.version >> ]
          steps:
            - aws-s3/copy:
                from: s3://<< parameters.s3_bucket >>/<< parameters.artifact_name >>/<< parameters.source_version >>/package.zip
                to: s3://<< parameters.s3_bucket >>/<< parameters.artifact_name >>/<< parameters.version >>/package.zip
      - aws-s3/copy:
          from: s3://<< parameters.s3_bucket >>/<< parameters.artifact_name >>/<< parameters.source_version >>/package.zip
          to: s3://<< parameters.s3_bucket >>/<< parameters.artifact_name >>/latest/package.zip


workflows:
  version: 2
  build:
    unless:
      or:
         - << pipeline.parameters.deploy_stage >>
         - not:
            equal: [ << pipeline.parameters.prod_tag >>, "" ]
    jobs:
      - deploy/notify_start:
          name: Start notification
          filters: *filter_main_only
          context:
            - Slack Notifications
      - jvm/test:
          name: test
          filters: *filter_branch_only
          context:
            - Docker Hub
          executor:
            name: test_containers
            java_version: << pipeline.parameters.java_version >>
          resource_class: medium
      - jvm/publish_lambda:
          name: publish
          filters: *filter_branch_only
          context:
            - Docker Hub
          requires:
            - test
          executor:
            name: jvm/default
            tag: << pipeline.parameters.java_version >>
          artifact_name: << pipeline.parameters.artifact_name >>
          version: $CIRCLE_SHA1
      - deploy/deploy_lambda:
          name: deploy_stage
          filters: *filter_main_only
          context:
            - Slack Notifications
            - AWS S3 Lambda Stage
          requires:
            - publish
          artifact_name: << pipeline.parameters.artifact_name >>
          lambda_name: << pipeline.parameters.lambda_name >>
          version: $CIRCLE_SHA1
      - deploy/notify_hold:
          name: Notify release approval
          filters: *filter_main_only
          context:
            - Slack Notifications
          requires:
            - deploy_stage
      - release_hold:
          name: Approval to prod
          filters: *filter_main_only
          type: approval
          requires:
            - Notify release approval
      - deploy/create_release_tag:
          name: Create release
          filters: *filter_main_only
          context:
            - Github
          requires:
            - Approval to prod

  deploy_stage:
    when: << pipeline.parameters.deploy_stage >>
    jobs:
      - deploy/deploy_lambda:
          name: deploy_stage
          context:
            - Slack Notifications
            - AWS S3 Lambda Stage
          artifact_name: << pipeline.parameters.artifact_name >>
          lambda_name: << pipeline.parameters.lambda_name >>
          version: $CIRCLE_SHA1

  deploy_prod_test:
    unless:
      equal: [ << pipeline.parameters.prod_tag >>, "" ]
    jobs:
      - create_lambda_release:
          name: create_lambda_release
          artifact_name: << pipeline.parameters.artifact_name >>
          source_version: << pipeline.git.revision >>
          version: << pipeline.parameters.prod_tag >>
      - deploy/deploy_lambda:
          name: deploy_prod
          context:
            - Slack Notifications
            - AWS S3 Lambda Prod
          requires:
            - create_lambda_release
          artifact_name: << pipeline.parameters.artifact_name >>
          lambda_name: << pipeline.parameters.lambda_name >>
          version: << pipeline.parameters.prod_tag >>

  deploy_prod:
    jobs:
      - create_lambda_release:
          name: create_lambda_release
          filters: *filter_tag_only
          artifact_name: << pipeline.parameters.artifact_name >>
          source_version: << pipeline.git.revision >>
          version: << pipeline.git.tag >>
      - deploy/deploy_lambda:
          name: deploy_prod
          filters: *filter_tag_only
          context:
            - Slack Notifications
            - AWS S3 Lambda Prod
          requires:
            - create_lambda_release
          artifact_name: << pipeline.parameters.artifact_name >>
          lambda_name: << pipeline.parameters.lambda_name >>
          version: $CIRCLE_TAG
